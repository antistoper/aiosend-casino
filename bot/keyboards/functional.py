from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, InputFile
from aiogram import Dispatcher

import random
from config import CHECK_URL
from bot.utils import text
from bot.utils.cryptopay import get_balance, crypto
import config
import main

def create_double_button(url, text="üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑"):
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text, url)], [InlineKeyboardButton("‚ô†Ô∏è –°–¥–µ–ª–∞—Ç—å c—Ç–∞–≤–∫—É", CHECK_URL)]])

def create_url_button(url, text="üéÅ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑"):
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text, url)]])

def create_mine_keyboards(num: int, id: int, amount: float, asset: str, username: str):
    markup = InlineKeyboardMarkup(5)
    mines = random.sample(range(0, 25), num)
    main.db.add_mines(id, mines, amount, asset, username)
    for i in range(25):
        markup.insert(InlineKeyboardButton('‚¨úÔ∏è', callback_data=f"mines_{id}_{i}"))
    return markup

def bet_channel_button(url=f"{config.CHECK_URL}", text="‚ô†Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"):
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text, callback_data="bet"), InlineKeyboardButton("üÜò –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/micecas")], [InlineKeyboardButton("üôé‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")], [InlineKeyboardButton("üíµ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referal_system")]])

def back_channel_button(url="https://t.me/lonocas", text="üé≤ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"):
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text, url=url)]])

def replenish_markup():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=config.REPLENISH_CHECK_URL)]])

async def bet(callback):
    await main.bot.send_message(callback.from_user.id, "<code>–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:</code>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("ü¶ã CryptoBot", url=config.CHECK_URL)], [InlineKeyboardButton("üí∞ –°—Ç–∞–≤–∫–∞ —Å –±–∞–ª–∞–Ω—Å–∞", url=f"https://t.me/{config.bot_username}?start=bet")]]))

async def referal_info(callback):
    await main.bot.answer_callback_query(
        callback.id,
        text=text.referal_info, show_alert=True
    )

async def referal_get_money(callback):
    if main.db.get_money(callback.from_user.id) != None:
        amount = round(main.db.get_money(callback.from_user.id), 2)
        if amount < float(3):
            await main.bot.answer_callback_query(
                callback.id,
                text="–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç 3$", 
                show_alert=True
            )
            return 0
        elif amount > float(5):
            await main.bot.send_message(callback.from_user.id, f"<b>–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b> <code>{amount}$</code>\n<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ —Å–∫–æ—Ä–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ—Ç –¥–µ–Ω—å–≥–∏</b>", parse_mode="HTML")
            main.db.set_money(callback.from_user.id, 0)
            return 0
        else:
            check = await crypto.create_check("USDT", amount)
            main.db.add_check(callback.from_user.id, check.check_id)
            main.db.set_money(callback.from_user.id, 0)

            get_referal_money_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(f"üéÅ –ü–æ–ª—É—á–∏—Ç—å {amount}$", url=f"{check.bot_check_url}")]])
            await main.bot.send_message(callback.from_user.id, f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {'{:.2f}'.format(amount)}$!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –∏—Ö.</b>", parse_mode="HTML", reply_markup=get_referal_money_markup)
    else:
        await main.bot.answer_callback_query(
            callback.id,
            text="–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç 3$", 
            show_alert=True
        )
        return 0

async def withdraw(callback):
    if main.db.get_balance(callback.from_user.id) != None:
        amount = round(main.db.get_balance(callback.from_user.id), 2)
        if amount < float(0.20):
            await main.bot.answer_callback_query(
                callback.id,
                text="–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç 0.20$", 
                show_alert=True
            )
            return 0
        elif amount > dict(await get_balance())["USDT"]:
            await main.bot.send_message(callback.from_user.id, f"<b>–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b> <code>{'{:.2f}'.format(amount)}$</code>\n<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ —Å–∫–æ—Ä–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ—Ç –¥–µ–Ω—å–≥–∏\n<i>PID: <code>{callback.from_user.id}</code></i></b>", parse_mode="HTML")
            main.db.set_balance(callback.from_user.id, 0)
            return 0
        else:
            check = await crypto.create_check("USDT", amount)
            main.db.add_check(callback.from_user.id, check.check_id)
            main.db.set_balance(callback.from_user.id, 0)

            get_referal_money_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(f"üéÅ –ü–æ–ª—É—á–∏—Ç—å {amount}$", url=f"{check.bot_check_url}")]])
            await main.bot.send_message(callback.from_user.id, f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {'{:.2f}'.format(amount)}$!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –∏—Ö.</b>", parse_mode="HTML", reply_markup=get_referal_money_markup)
    else:
        await main.bot.answer_callback_query(
            callback.id,
            text="–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç 0.20$", 
            show_alert=True
        )
        return 0

async def replenish(callback):
    await callback.bot.send_message(
        callback.from_user.id,
        "<b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ CryptoBot –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.</b>",
        parse_mode="HTML",
        reply_markup=replenish_markup()
    )

async def profile(callback):
    back_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å", callback_data=f"withdraw"), InlineKeyboardButton("‚úö –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"replenish")], [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"back_to_main_menu")]])
    await main.bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message["message_id"], media=InputMediaPhoto(type="photo", media=InputFile(path_or_bytesio="imgs/profile.jpg", filename="profile.jpg")))
    await main.bot.edit_message_caption(callback.from_user.id, callback.message["message_id"], caption=text.get_profile(callback.from_user.id, callback.from_user.username), parse_mode="HTML", reply_markup=back_markup)

async def referal(callback):
    money = main.db.get_money(callback.from_user.id) if main.db.get_money(callback.from_user.id) != None else 0
    referals = main.db.get_referals(callback.from_user.id) if main.db.get_referals(callback.from_user.id) != None else 0
    referal_url = f"https://t.me/{config.bot_username}?start=ref{callback.from_user.id}"
    referer = main.db.get_referer(callback.from_user.id)

    if referer != None:
        ref_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("‚ö†Ô∏é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="referal_info"), InlineKeyboardButton("ü•∑ –†–µ—Ñ–µ—Ä–µ—Ä", url=f"tg://user?id={referer}")], [InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ üíµ", callback_data=f"referal_get_money")], [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"back_to_main_menu")]])
    else:
        referer = "–ù–µ—Ç—É"
        ref_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("‚ö†Ô∏é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="referal_info")], [InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ üíµ", callback_data=f"referal_get_money")], [InlineKeyboardButton("‚è™ –ù–∞–∑–∞–¥", callback_data=f"back_to_main_menu")]])
    await main.bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message["message_id"], media=InputMediaPhoto(type="photo", media=InputFile(path_or_bytesio="imgs/refs.jpg", filename="refs.jpg")))
    await main.bot.edit_message_caption(callback.from_user.id, callback.message["message_id"], caption=text.get_referal(callback.from_user.id, money, referals, referer, referal_url), parse_mode="HTML", reply_markup=ref_markup)

async def back_to_main_menu(callback):
    await main.bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message["message_id"], media=InputMediaPhoto(type="photo", media=InputFile(path_or_bytesio="imgs/menu.jpg", filename="menu.jpg")))
    await main.bot.edit_message_caption(callback.from_user.id, callback.message["message_id"], caption=text.main_text, parse_mode="HTML", reply_markup=bet_channel_button())

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(profile, text="profile")
    dp.register_callback_query_handler(referal, text="referal_system")
    dp.register_callback_query_handler(referal_info, text="referal_info")
    dp.register_callback_query_handler(referal_get_money, text="referal_get_money")
    dp.register_callback_query_handler(withdraw, text="withdraw")
    dp.register_callback_query_handler(replenish, text="replenish")
    dp.register_callback_query_handler(bet, text="bet")
    dp.register_callback_query_handler(back_to_main_menu, text="back_to_main_menu")