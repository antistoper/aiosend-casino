from aiogram.types import Message, ChatType
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram import Dispatcher
from aiogram.utils.deep_linking import decode_payload, get_start_link
import re
import config
from settings import keywords, coefs
from bot.utils import func, text, game_process
from bot.utils.cryptopay import get_balance, crypto
import asyncio, config, main, random
from bot import keyboards

async def getter(msg_query: Message):
    """...."""
    if msg_query.chat.id == config.CHANNEL_BROKER: #–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–µ
        if msg_query.entities: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ entities
            #amount_text = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1]
            #amount_match = re.search(r"([\d.]+)\s*USDT", amount_text)
            #if amount_match:
                #amount = float(amount_match.group(1).replace(',', '.')) 
            amount = float(msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) ü™ô")[1].split()[0].replace(',', "")) #–ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
            name = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) ü™ô")[0] #–ø–æ–ª—É—á–∞–µ–º –∏–º—è —á–µ–ª–∞
            if msg_query.entities[0].user and msg_query.entities[0].user != "–ù–µ–∫—Ç–æ": #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–∞
                user = msg_query.entities[0].user
                username = f"@{user.username}" if user.username else user.full_name
                name = user.full_name #—Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if "–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)" in name:
                    return
                msg_text = msg_query.text.removeprefix(name) #—É–¥–∞–ª—è–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä–µ—Ö–∞ –ø–æ–¥–∞–ª—å—à–µ
                user_id = int(user.id)

                if not main.db.users_exists(user_id): main.db.add_user(user_id, "NULL")
                #asset =  msg_text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)  ü™ô ")[1].split()[1]
                asset = "USDT"
                #amount_text = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1]
                #amount_match = re.search(r"([\d.]+)\s*USDT", amount_text)
                #if amount_match:
                    #amount = float(amount_match.group(1).replace(',', '.')) 
                if user_id not in main.db.get_bannned(): #–ø—Ä–æ–≤–µ–∫–∞ —á—Ç–æ–±—ã —á–µ–ª –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ
                    if "üí¨ " in msg_query.text: #–ø—Ä–æ–≤–µ—Ä—è–º–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–µ–Ω—Ç–∞
                        coef = 0
                        if f"@{config.bot_username.lower()}" in name.lower(): #—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—ç—Ñ –µ—Å–ª–∏ —É —á–µ–ª–∞ –≤ –Ω–∏–∫–µ MafiaCasinoTG
                            coef += 0.05
                        old_comment = msg_query.text.split("üí¨ ")[1]
                        comment = old_comment.lower()
                        comment = comment.replace('—ë', '–µ') 
                        await asyncio.sleep(4)
                        new_text = msg_query.html_text + "\n\n‚úÖ ‚Ä¢ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!"
                        await main.bot.edit_message_text(chat_id=config.CHANNEL_BROKER, message_id=msg_query.message_id, text=new_text, parse_mode="HTML", disable_web_page_preview=True)
                        if amount > config.max:
                            try:
                                check = await crypto.create_check(asset, amount - amount * 0.5)
                                main.db.add_check(user_id, check.check_id)
                                await main.bot_send_message(config.MAIN_CHANNEL, f"<b>‚ùó ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {config.max} USDT.</b>\n\n<blockquote><b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ c –∫–æ–º–∏—Å—Å–∏–µ–π 50%!</b></blockquote>", 'html', reply_markup=keyboards.functional.create_url_button(await get_start_link(user_id, True), "üí∏ ‚Ä¢ –í–µ—Ä–Ω—É—Ç—å"))
                                return
                            except:
                                await main.bot.send_message(config.MAIN_CHANNEL, f"<b>‚ùó ‚Ä¢  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {config.max} USDT.\n\n<blockquote>–°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π 50% –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Ä—É—á–Ω—É—é.</blockquote></b>" + "\n\n"+ text.links, 'html', reply_markup=keyboards.functional.create_url_button(config.CHECK_URL, "–°–¥–µ–ª–∞—Ç—å –°—Ç–∞–≤–∫—É"), disable_web_page_preview=True)
                                await main.bot.send_message(config.LOG_CHANNEL, f"‚ùó{username} ({user_id}). {amount - amount * 0.5} –ó–ê–î–û–õ–ñ–ï–ù–ù–û–°–¢–¨!")
                                return
                        #await main.bot.send_message(config.MAIN_CHANNEL, "[‚úÖ] –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
                        message = await main.bot.send_message(config.MAIN_CHANNEL, text.get_stake(amount, asset, comment, name), 'html', disable_web_page_preview=True)
                        gp = game_process.GameProcess(amount, asset, coef, user_id, username, name=name)
                        if not main.db.users_exists(user_id):
                            main.db.add_user(user_id)
                            main.db.set_active(user_id, 0)
                        main.db.edit_total(user_id, 1)
                        amount_for_moneyback = amount if asset == "USDT" else amount * 2.8
                        main.db.edit_moneyback(user_id, amount_for_moneyback*config.MONEYBACK)
                        if func.contains(keywords.DICE, comment):
                            new_com = func.remove_prefixes(keywords.DICE, comment)
                            print(new_com)
                            if func.equals(keywords.EVEN, new_com):
                                await gp.dice_procces(message, 'even')
                            elif func.equals(keywords.ODD, new_com):
                                await gp.dice_procces(message, 'odd')
                            elif func.equals(keywords.MORE, new_com):
                                await gp.dice_procces(message, 'more')
                            elif func.equals(keywords.LESS, new_com):
                                await gp.dice_procces(message, 'less')
                            elif new_com.isdigit() and new_com != "456" and new_com != "123" and new_com != "321" and new_com != "654" and new_com != "246" and new_com != "135":
                                    coef += coefs.DICE_NUMBER
                                    n = int(new_com)
                                    if 0 < n < 7:
                                       await gp.dice_procces(message, 'number', n)
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            elif "–¥—É—ç–ª—å " in new_com:
     
                                num = new_com.split()[1]
                                if num.isdigit():
                                    num = int(num)
                                    if 0 < num < 3:
                                        await gp.duel_number_process(message, num)
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            elif new_com == "–¥—É—ç–ª—å":
                                await gp.duel_proccess(message)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            return
                        if func.contains(keywords.SECTOR, comment):
                            new_com = func.remove_prefixes(keywords.SECTOR, comment)
                            if new_com.isdigit() and new_com != "456" and new_com != "123" and new_com != "321" and new_com != "654" and new_com != "246" and new_com != "135":
                                coef += coefs.DICE_SECTOR
                                n = int(new_com)
                                if 0 < n < 4:
                                    pass
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                                    return 0
                                sector = n
                                await gp.dice_procces(message, 'sector', n=sector)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.DARTS, comment):
                            new_com = func.remove_prefixes(keywords.DARTS, comment)
                            if func.equals(keywords.RED, new_com):
                                await gp.darts_procces(message, 'r')
                            elif func.equals(keywords.WHITE, new_com):
                                await gp.darts_procces(message, 'w')
                            elif func.equals(keywords.CENTER, new_com):
                                await gp.darts_procces(message)
                            elif func.equals(keywords.MISS, new_com):
                                await gp.darts_procces(message, 'miss')
                            elif "–¥—É—ç–ª—å " in new_com:
                                coef += coefs.DUEL
                                num = new_com.split()[1]
                                if num.isdigit():
                                    num = int(num)
                                    if 0 < num < 3:
                                        await gp.duel_number_process(message, num, 'üéØ', ['–ø–µ—Ä–≤–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞', '–≤—Ç–æ—Ä–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞'])
                            elif new_com == "–¥—É—ç–ª—å":
                                await gp.duel_proccess(message, 'üéØ', ['–ø–µ—Ä–≤–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞', '–≤—Ç–æ—Ä–æ–≥–æ –¥—Ä–æ—Ç–∏–∫–∞'], ['lose.jpg', 'win.jpg'])
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.BASKET, comment):
                                new_com = func.remove_prefixes(keywords.BASKET, comment)
                                if func.equals(keywords.GOAL, new_com):
                                    await gp.basketball_process(message)
                                elif func.equals(keywords.MISS, new_com):
                                    await gp.basketball_process(message, 'miss')
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.FOOTBALL, comment):
                            new_com = func.remove_prefixes(keywords.FOOTBALL, comment)
                            if func.equals(keywords.GOAL, new_com):
                                await gp.footaball_process(message)
                            elif func.equals(keywords.MISS, new_com):
                                await gp.footaball_process(message, 'miss')
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.BOWLING, comment):
                            new_com = func.remove_prefixes(keywords.BOWLING, comment)
                            if new_com.isdigit():
                                stake = int(new_com)
                                if -1 < stake < 7:
                                    await gp.bowling_process(message, stake)
                            elif func.equals(keywords.STRIKE, new_com):
                                await gp.bowling_process(message, 0)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.MINES, comment):
                            if not main.db.user_played_mines(user_id):
                                new_com = comment
                                new_com = new_com.removeprefix("–º–∏–Ω—ã ")
                                if new_com.isdigit():
                                    n = int(int(new_com))
                                    if 25 > n > 2:
                                        c = 0
                                        coef += 1
                                        await main.bot.send_message(user_id, f"*‚ö° –í—ã–±–µ—Ä–µ—Ç–µ –ª—é–±–æ–π —Å–ª–æ—Ç*\n*–ö–ª–µ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ:* 0\n*–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç:* 1X\n*–í—ã–∏–≥—Ä—ã—à:* {round(amount * coef, 2)}  {asset}", 'markdown', reply_markup=keyboards.functional.create_mine_keyboards(n, user_id, amount, asset, username))
                                        await message.answer(f"<b>‚ö° <a href='https://t.me/{username}'>{username}</a>, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç!</b>", "HTML")
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            else:
                                if amount < dict(await get_balance())[asset]:
                                    if amount < 1:
                                        check = await crypto.create_check(asset, amount - amount * 0.1)
                                        main.db.add_check(user_id, check.check_id)
                                        msag = await message.reply("<b>‚ùó –í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É</b>\n\n<blockquote><b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ c –∫–æ–º–∏—Å—Å–∏–µ–π 10%!</b></blockquote>", 'html', reply_markup=keyboards.functional.create_url_button(await get_start_link(user_id, True), "–í–µ—Ä–Ω—É—Ç—åüí∏"))
                                    else:
                                        await crypto.transfer(user_id, asset, amount - amount * 0.1, text.rnd_id())
                                        msag = await message.reply("<b>‚ùó –í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É</b>\n\n<blockquote><b>–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å c –∫–æ–º–∏—Å—Å–∏–µ–π 10%!</b></blockquote>", 'html')
                                else:
                                    msag = await message.reply("*‚ùó –í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É*\n\n<blockquote>–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!</blockquote>", 'markdown')
                                await asyncio.sleep(20)
                                await msag.delete()
                        elif func.equals(keywords.ROCK_SIZER_PAPER_COMBINE, comment):
                            if func.equals(keywords.ROCK_SIZER_PAPER["paper"], comment): _value = "paper"
                            elif func.equals(keywords.ROCK_SIZER_PAPER["sizer"], comment): _value = "sizer"
                            else: _value = "rock"
                            
                            await gp.rock_paper_sizer_proccess(message, value=_value)
                        else:
                            if func.equals(keywords.EVEN, comment):
                                await gp.dice_procces(message, 'even')
                            elif func.equals(keywords.ODD, comment):
                                await gp.dice_procces(message, 'odd')
                            elif func.equals(keywords.RED, comment):
                                await gp.darts_procces(message, 'r')
                            elif func.equals(keywords.WHITE, comment):
                                await gp.darts_procces(message, 'w')
                            elif func.equals(keywords.DARTS, comment) or func.equals(keywords.CENTER, comment):
                                await gp.darts_procces(message)
                            elif func.equals(keywords.BASKET, comment):
                                await gp.basketball_process(message)
                            elif func.equals(keywords.FOOTBALL, comment):
                                await gp.footaball_process(message)
                            elif func.equals(keywords.BOWLING, comment) or func.equals(keywords.STRIKE, comment):
                                await gp.bowling_process(message, 0)
                            elif func.equals(keywords.SLOTS, comment):
                                msg = await message.answer_dice('üé∞')
                                v = msg.dice.value
                                await asyncio.sleep(6)
                                if v == 64:
                                    await func.winner(message, amount, asset, coefs.SLOTS_777 + coef, user_id, username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas") #777
                                elif v == 1 or v==22:
                                    await func.winner(message, amount, asset, coefs.SLOTS_GRAPE + coef, user_id,  username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas") #bar and grape
                                elif v == 43:
                                    await func.winner(message, amount, asset, coefs.SLOTS_LEMON + coef, user_id, username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas")
                                else:
                                    await func.looser(message, "–ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã –Ω–µ –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", user_id=user_id, amount=amount, type="cas")
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                    else:
                        #–µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–µ–Ω—Ç–∞
                        message = await main.bot.send_message(config.MAIN_CHANNEL, text.get_stake(amount, asset, '‚ùå –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', name), 'html', disable_web_page_preview=True)
                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        await asyncio.sleep(20)
                        await message.delete()
                else:
                    #–µ—Å–ª–∏ –±–∞–Ω
                    await main.bot.send_message(config.LOG_CHANNEL, f"–ó–∞–±–∞–Ω–Ω–µ–Ω—ã–π {username}({user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} {asset}")
            else:
                #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫
                await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {name}! –ï–≥–æ —Å—Ç–∞–≤–∫–∞ {amount} {asset}", disable_web_page_preview=True)
                message = await main.bot.send_message(config.MAIN_CHANNEL, f"‚ùó –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–µ–º <b>{name}</b>! –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º\n\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏!", "html", disable_web_page_preview=True)

    elif msg_query.chat.id == config.REPLENISH_CHANNEL:
        if msg_query.entities:
            amount = float(msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[0].replace(',', "")) #–ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
            name = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0] #–ø–æ–ª—É—á–∞–µ–º –∏–º—è —á–µ–ª–∞
            if msg_query.entities[0].user and msg_query.entities[0].user != "–ù–µ–∫—Ç–æ": #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–∞
                user = msg_query.entities[0].user
                username = f"@{user.username}" if user.username else user.full_name
                name = user.full_name #—Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if "–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)" in name:
                    return
                msg_text = msg_query.text.removeprefix(name) #—É–¥–∞–ª—è–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä–µ—Ö–∞ –ø–æ–¥–∞–ª—å—à–µ
                user_id = int(user.id)

                if not main.db.users_exists(user_id): main.db.add_user(user_id, "NULL")
                asset = "USDT"
                if user_id not in main.db.get_bannned():
                    static_balance = main.db.get_balance(user_id)
                    balance = float(static_balance) if static_balance != None else 0
                    main.db.set_balance(user_id, balance + amount)
                    await main.bot.send_message(user_id, f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}$</b>", parse_mode="HTML")
                else:
                    #–µ—Å–ª–∏ –±–∞–Ω
                    await main.bot.send_message(config.LOG_CHANNEL, f"–ó–∞–±–∞–Ω–Ω–µ–Ω—ã–π {username}({user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} {asset}")
            else:
                #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫
                await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ï–≥–æ —Å—Ç–∞–≤–∫–∞ {amount} {asset}", disable_web_page_preview=True)
                message = await main.bot.send_message(config.MAIN_CHANNEL, f"‚ùó –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞! –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º\n\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏!", "html", disable_web_page_preview=True)

        else:
            #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫
            await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ï–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} {asset}", disable_web_page_preview=True)
        return

    else:
        #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫
        await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {name}! –ï–≥–æ —Å—Ç–∞–≤–∫–∞ {amount} {asset}", disable_web_page_preview=True)
        message = await main.bot.send_message(config.MAIN_CHANNEL, f"‚ùó –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–µ–º <b>{name}</b>! –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º\n\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏!", "html", disable_web_page_preview=True)

async def anon_getter(msg_query: Message):
    amount = float(msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª ü™ô")[1].split()[0].replace(',', ""))
    name = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª ü™ô")[0] 
    await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {name}! –ï–≥–æ —Å—Ç–∞–≤–∫–∞ {amount} USDT", disable_web_page_preview=True)
    message = await main.bot.send_message(config.MAIN_CHANNEL, f"‚ùó –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–∑–Ω–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–µ–º <b>{name}</b>! –ü–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º\n\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏!", "html", disable_web_page_preview=True)

def register_handlers(dp: Dispatcher):
    dp.register_channel_post_handler(getter, ChatTypeFilter(ChatType.CHANNEL), text_contains="–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")
    dp.register_channel_post_handler(anon_getter, ChatTypeFilter(ChatType.CHANNEL), text_contains="–æ—Ç–ø—Ä–∞–≤–∏–ª")