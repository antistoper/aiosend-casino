from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import decode_payload
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot import keyboards
from bot.utils import text
from bot.utils.cryptopay import crypto
from bot.handlers import game
from bot.states import states_groups
import main, config, asyncio
import logging

async def start_bet(call: CallbackQuery):
    await states_groups.BalanceBetState.bet.set()
    await call.message.answer("<code>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:</code>", parse_mode="HTML")

async def process_bet(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['bet'] = message.text
    
    if data["bet"] == "/cancel":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.finish()
        return

    try:
        bet = float(data["bet"])
        static_balance = main.db.get_balance(message.from_user.id)
        balance = float(static_balance) if static_balance != None else 0

        if bet > balance:
            await states_groups.BalanceBetState.bet.set()
            await message.answer(f"<code>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$\n/cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å</code>", parse_mode="HTML")
            return
        
        await states_groups.BalanceBetState.comment.set()
        await message.answer("<code>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏–≥—Ä—ã:</code>", parse_mode="HTML")
    except Exception:
        await states_groups.BalanceBetState.bet.set()
        await message.answer("<code>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å—É–º–º—É\n/cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å</code>", parse_mode="HTML")
        return

async def process_comment(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['comment'] = message.text
    
    if data["comment"] == "/cancel":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.finish()
        return

    await message.answer(f"<b>–°—Ç–∞–≤–∫–∞: <code>{data['bet']}$</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{data['comment']}</code></b>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("‚ô†Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="bet_balance_finish")]]))
    await states_groups.BalanceBetState.finish.set()

async def finish_bet(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bet = data["bet"]
        comment = data["comment"]
    
    static_balance = main.db.get_balance(call.from_user.id)
    balance = float(static_balance) if static_balance != None else 0

    main.db.set_balance(call.from_user.id, float(balance) - float(bet))
    success_message = await call.message.answer("üí∏")
    await asyncio.sleep(3)
    await success_message.edit_text("üëå")

    formated_bet = '{:.2f}'.format(float(bet)) if float(bet) != int(float(bet)) else int(float(bet))
    formated_name = f"{call.from_user.first_name} {call.from_user.last_name}" if call.from_user.last_name else call.from_user.first_name
    user_link = f"tg://user?id={call.from_user.id}"

    bet_message = await main.bot.send_message(config.MAIN_CHANNEL, f"<b><a href='{user_link}'>{formated_name}</a></b> <a href='{config.CHECK_URL}'>–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)</a><b> ü™ô {formated_bet} USDT (${formated_bet})</b>\n\nüí¨ {comment}", parse_mode="HTML", disable_web_page_preview=True)
    await game.getter(msg_query=bet_message)


    await state.finish()

async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    args = message.get_args()  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_exists = main.db.users_exists(message.from_user.id)
    
    if not user_exists:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
        if args.startswith("ref"):
            referer_id = args[3:]
            main.db.add_user(message.from_user.id, referer_id)
            referals = int(main.db.get_referals(referer_id) or 0) + 1
            main.db.set_referals(referer_id, referals)
        else:
            main.db.add_user(message.from_user.id, "NULL")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    main.db.set_active(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, check –∏–ª–∏ ref)
    if args and not args.startswith("ref") and args != "bet":
        id = decode_payload(args)  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç
        if int(id) == message.from_user.id:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if main.db.have_check(message.from_user.id):
                check_id = main.db.get_check_id(message.from_user.id)
                check = await crypto.get_checks(check_ids=check_id)
    
                if check and hasattr(check, "bot_check_url"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ check –Ω–µ None –∏ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç bot_check_url
                    await message.answer(
                        "üéÅ | –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
                        reply_markup=keyboards.functional.create_double_button(check.bot_check_url)
                    )
                    main.db.remove_check(check_id)
                else:
                    logging.error(f"–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: check_id={check_id}, check={check}")
                    await message.answer("‚ö†Ô∏è | –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —á–µ–∫–∞.")

    elif args == "bet":
       await message.answer("<b>–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("‚ô†Ô∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="bet_balance_start")]]))

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        if not user_exists and args.startswith("ref"):  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            referer_id = args[3:]
            if str(referer_id) != str(message.from_user.id):  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª—ã
                ref_markup = InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton("ü•∑ –†–µ—Ñ–µ—Ä–µ—Ä", url=f"tg://user?id={referer_id}")]]
                )
                await main.bot.send_message(
                    message.from_user.id, 
                    f"<b>–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å </b> <code>{referer_id}</code>\n<b>–û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è</b>", 
                    parse_mode="HTML", 
                    reply_markup=ref_markup
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(
            open("imgs/menu.jpg", 'rb'), 
            text.main_text, 
            reply_markup=keyboards.functional.bet_channel_button(), 
            parse_mode='HTML'
        )

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(process_bet, state=states_groups.BalanceBetState.bet)
    dp.register_message_handler(process_comment, state=states_groups.BalanceBetState.comment)
    dp.register_callback_query_handler(start_bet, text='bet_balance_start')
    dp.register_callback_query_handler(finish_bet, text='bet_balance_finish', state=states_groups.BalanceBetState.finish)